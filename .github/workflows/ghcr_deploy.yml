# this workflow is triggered by an API call when there is a new PyPI release of LiteLLM
name: Build LiteLLM Docker
on:
  workflow_dispatch:
    inputs:
      tag:
        description: "The tag version you want to build"
      release_type:
        description: "The release type you want to build. Can be 'latest', 'stable', 'dev', 'rc'"
        type: string
        default: "latest"

# Defines two custom environment variables for the workflow. Used for the Container registry domain, and a name for the Docker image that this workflow builds.
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  # CHART_NAME: litellm-helm

# There is a single job in this workflow. It's configured to run on the latest available version of Ubuntu.
jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    environment: 'prod'
    steps:
      - name: Delete huge unnecessary tools folder
        run: rm -rf /opt/hostedtoolcache
        
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@v1.3.1
        with:
          tool-cache: false
          # all of these default to true to skip
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          swap-storage: false
          
      - name: Checkout repository
        uses: actions/checkout@v4.2.2

      - name: Initialize Docker Buildx
        uses: docker/setup-buildx-action@v3.9.0
        with:
          install: true
      
      - name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3.4.0
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push
        run: |
          tag=latest-${cuda_tag}  # ${version}
          docker build . -f docker/Dockerfile --build-arg max_jobs=2 -t kairos333/litellm:${tag} --no-cache
          docker push kairos333/litellm:${tag}
  
  # build-and-push-image-spend-logs:
  #   runs-on: ubuntu-latest
  #   permissions:
  #     contents: read
  #     packages: write
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4
  #       # with:ref: ${{ github.event.inputs.commit_hash }}

  #     - name: Log in to the Container registry
  #       uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
  #       with:
  #         registry: ${{ env.REGISTRY }}
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GITHUB_TOKEN }}

  #     - name: Extract metadata (tags, labels) for spend-logs Dockerfile
  #       id: meta-spend-logs
  #       uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
  #       with:
  #         images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-spend_logs
  #     # Configure multi platform Docker builds
  #     - name: Set up QEMU
  #       uses: docker/setup-qemu-action@e0e4588fad221d38ee467c0bffd91115366dc0c5
  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@edfb0fe6204400c56fbfd3feba3fe9ad1adfa345

  #     - name: Build and push Database Docker image
  #       uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
  #       with:
  #         context: .
  #         file: ./litellm-js/spend-logs/Dockerfile
  #         push: true
  #         tags: |
  #           ${{ steps.meta-spend-logs.outputs.tags }}-${{ github.event.inputs.tag || 'latest' }},
  #           ${{ steps.meta-spend-logs.outputs.tags }}-${{ github.event.inputs.release_type }}
  #           ${{ (github.event.inputs.release_type == 'stable'  || github.event.inputs.release_type == 'rc') && format('{0}/kairos333/litellm-spend_logs:main-{1}', env.REGISTRY, github.event.inputs.tag) || '' }},
  #           ${{ github.event.inputs.release_type == 'stable' && format('{0}/kairos333/litellm-spend_logs:main-stable', env.REGISTRY) || '' }}
  #         platforms: local,linux/amd64
